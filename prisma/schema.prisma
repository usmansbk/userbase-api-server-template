// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model File {
  key          String       @unique
  bucket       String
  mimetype     String
  size         Int
  encoding     String?
  fieldname    String?
  originalname String?
  contentType  String?
  metadata     Json?
  location     String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime?    @updatedAt
  userAvatars  UserAvatar[]

  @@unique([key, bucket])
}

model Role {
  id              String           @id @default(uuid())
  name            String           @unique
  description     String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime?        @updatedAt
  creator         User?            @relation("CreatedRole", fields: [creatorId], references: [id])
  creatorId       String?
  userRoles       UserRole[]
  rolePermissions RolePermission[]
}

model Permission {
  id              String           @id @default(uuid())
  name            String           @unique
  description     String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime?        @updatedAt
  creator         User?            @relation("CreatedPermission", fields: [creatorId], references: [id])
  creatorId       String?
  userPermissions UserPermission[]
  rolePermissions RolePermission[]
}

enum UserStatus {
  Staged
  Provisioned
  Active
  Recovery
  PasswordExpired
  LockedOut
  Suspended
  Deprovisioned
}

model UserSession {
  id        String   @id @default(cuid())
  jti       String   @default(cuid())
  clientId  String
  clientIp  String
  userAgent String?
  geo       String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId   String
}

model User {
  id                            String           @id @default(uuid())
  firstName                     String
  lastName                      String?
  surname                       String?
  socialPictureUrl              String?
  email                         String           @unique
  password                      String
  phoneNumber                   String?          @unique
  isEmailVerified               Boolean?         @default(false)
  isPhoneNumberVerified         Boolean?         @default(false)
  language                      String?          @default("en")
  createdAt                     DateTime         @default(now())
  updatedAt                     DateTime?        @updatedAt
  passwordUpdatedAt             DateTime?
  blockedIps                    Json             @default("{}")
  status                        UserStatus       @default(Staged)
  avatar                        UserAvatar?
  rolesCreatedByUser            Role[]           @relation("CreatedRole")
  permissionsCreatedByUser      Permission[]     @relation("CreatedPermission")
  rolesAssignedToUser           UserRole[]       @relation("RoleAssignee")
  rolesAssignedByUser           UserRole[]       @relation("RoleAssignor")
  permissionsAssignedToUser     UserPermission[] @relation("PermissionAssignee")
  permissionsAssignedByUser     UserPermission[] @relation("PermissionAssignor")
  rolePermissionsAssignedByUser RolePermission[] @relation("RolePermissionAssignor")
  sessions                      UserSession[]
}

model UserAvatar {
  id         String    @id @default(uuid())
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String    @unique
  file       File      @relation(fields: [fileKey, fileBucket], references: [key, bucket], onDelete: Cascade)
  fileKey    String
  fileBucket String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
}

model UserRole {
  id         String    @id @default(uuid())
  assignee   User      @relation("RoleAssignee", fields: [assigneeId], references: [id], onDelete: Cascade)
  assignor   User?     @relation("RoleAssignor", fields: [assignorId], references: [id])
  role       Role      @relation(fields: [roleId], references: [id], onDelete: Cascade)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
  assigneeId String
  roleId     String
  assignorId String?

  @@unique([roleId, assigneeId])
}

model UserPermission {
  id           String     @id @default(uuid())
  assignee     User       @relation("PermissionAssignee", fields: [assigneeId], references: [id], onDelete: Cascade)
  assignor     User?      @relation("PermissionAssignor", fields: [assignorId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime?  @updatedAt
  assigneeId   String
  assignorId   String?
  permissionId String

  @@unique([permissionId, assigneeId])
}

model RolePermission {
  id         String     @id @default(uuid())
  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  assignor   User?      @relation("RolePermissionAssignor", fields: [assignorId], references: [id])

  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
  roleId       String
  permissionId String
  assignorId   String?

  @@unique([roleId, permissionId])
}

enum ApplicationType {
  SPA
  Machine
  Native
  RegularWebApplication
}

model Application {
  id          String           @id @default(uuid())
  clientId    String           @default(cuid())
  name        String           @unique
  description String?
  type        ApplicationType?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime?        @updatedAt
}
