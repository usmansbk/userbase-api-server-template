type UserAvatar implements Picture {
  id: ID!
  file: File!
  url(edits: ImageEditInput): URL!
  thumbnail(edits: ImageEditInput): URL!
  createdAt: DateTime!
  updatedAt: DateTime
}

type User {
  id: ID!
  firstName: String!
  lastName: String
  surname: String
  email: EmailAddress!
    @auth(
      rules: [
        { allow: owner, ownerField: "id" }
        { allow: roles, roles: ["Admin"] }
      ]
    )
  language: Locale!
  phoneNumber: PhoneNumber
    @auth(
      rules: [
        { allow: owner, ownerField: "id" }
        { allow: roles, roles: ["Admin"] }
      ]
    )
  isEmailVerified: Boolean!
  isPhoneNumberVerified: Boolean!
  isMe: Boolean!
  socialPictureUrl: URL
  picture: UserAvatar
  createdAt: DateTime!
  updatedAt: DateTime
  lastLoggedInAt: DateTime
  passwordLastUpdatedAt: DateTime
  phoneNumberLastUpdatedAt: DateTime
  emailLastUpdatedAt: DateTime
  pictureLastUpdatedAt: DateTime
  roles: [String]!

  rolesCreatedByUser: [Role]!
  permissionsCreatedByUser: [Permission]!
  rolesAssignedToUser: [UserRole]!
  rolesAssignedByUser: [UserRole]!
  permissionsAssignedToUser: [UserPermission]!
  permissionsAssignedByUser: [UserPermission]!
  rolePermissionsAssignedByUser: [RolePermission]!
}

type Role @auth(rules: [{ allow: roles, roles: ["Admin"] }]) {
  id: ID!
  name: String!
  creator: User
  description: String
  createdAt: DateTime!
  updatedAt: DateTime
  userRoles: [UserRole]!
  rolePermissions: [RolePermission]!
}

type Permission @auth(rules: [{ allow: roles, roles: ["Admin"] }]) {
  id: ID!
  name: String!
  creator: User
  description: String
  createdAt: DateTime!
  updatedAt: DateTime
  userPermissions: [UserPermission]!
  rolePermissions: [RolePermission]!
}

type UserRole @auth(rules: [{ allow: roles, roles: ["Admin"] }]) {
  id: ID!
  role: Role!
  assignee: User!
  assignor: User
  createdAt: DateTime!
  updatedAt: DateTime
}

type UserPermission @auth(rules: [{ allow: roles, roles: ["Admin"] }]) {
  id: ID!
  permission: Permission!
  assignee: User!
  assignor: User
  createdAt: DateTime!
  updatedAt: DateTime
}

type RolePermission @auth(rules: [{ allow: roles, roles: ["Admin"] }]) {
  id: ID!
  role: Role!
  permission: Permission!
  assignor: User
  createdAt: DateTime!
  updatedAt: DateTime
}

type Query {
  me: User! @auth
}

type AuthResponse implements Response {
  success: Boolean
  message: String
  accessToken: JWT!
  refreshToken: JWT
}

type UserResponse implements Response {
  success: Boolean
  message: String
  user: User!
}

enum SocialProvider {
  GOOGLE
}

input SocialProviderLoginInput {
  provider: SocialProvider!
  token: NonEmptyString!
}

input EmailLoginInput {
  email: EmailAddress!
  password: NonEmptyString!
}

input EmailOTPLoginInput {
  email: EmailAddress!
  otp: NonEmptyString!
}

input SMSOTPLoginInput {
  phoneNumber: PhoneNumber!
  otp: NonEmptyString!
}

input RegisterWithEmailInput {
  firstName: NonEmptyString!
  lastName: NonEmptyString
  surname: NonEmptyString
  email: EmailAddress!
  password: NonEmptyString!
  phoneNumber: PhoneNumber
  language: Locale
}

input UpdateBasicInfoInput {
  firstName: NonEmptyString!
  lastName: NonEmptyString
  surname: NonEmptyString
  language: Locale
}

input ResetPasswordInput {
  email: EmailAddress!
  newPassword: NonEmptyString!
  token: NonEmptyString!
}

input VerifyPhoneNumberInput {
  phoneNumber: PhoneNumber!
  token: NonEmptyString!
}

input VerifyNewEmailInput {
  email: EmailAddress!
  token: NonEmptyString!
}

input DeleteAccountInput {
  password: NonEmptyString!
  token: NonEmptyString!
}

input UpdatePhoneNumberInput {
  phoneNumber: PhoneNumber!
}

input VerifyEmailInput {
  token: NonEmptyString!
}

type Mutation {
  loginWithSocialProvider(input: SocialProviderLoginInput!): AuthResponse!

  registerWithEmail(input: RegisterWithEmailInput!): AuthResponse!
  loginWithEmail(input: EmailLoginInput!): AuthResponse!

  requestEmailLoginOTP(email: EmailAddress!): MutationResponse!
  loginWithEmailOTP(input: EmailOTPLoginInput!): AuthResponse!

  requestSMSLoginOTP(phoneNumber: PhoneNumber!): MutationResponse!
  loginWithSMSOTP(input: SMSOTPLoginInput!): AuthResponse!

  requestUserPhoneNumberVerification(
    phoneNumber: PhoneNumber!
  ): MutationResponse!
  verifyUserPhoneNumber(input: VerifyPhoneNumberInput!): MutationResponse!

  requestUserEmailVerification(email: EmailAddress!): MutationResponse!
  verifyUserEmail(input: VerifyEmailInput!): MutationResponse!
  requestChangeCurrentUserEmailAddress: MutationResponse! @auth
  verifyUserNewEmailAddress(input: VerifyNewEmailInput!): MutationResponse!

  requestResetUserPassword(email: EmailAddress!): MutationResponse!
  resetUserPassword(input: ResetPasswordInput!): MutationResponse!

  removeCurrentUserPicture: UserResponse! @auth
  updateCurrentUserBasicInfo(input: UpdateBasicInfoInput!): UserResponse! @auth
  updateCurrentUserPhoneNumber(input: UpdatePhoneNumberInput!): UserResponse!
    @auth

  requestDeleteCurrentUserAccount: MutationResponse! @auth
  deleteUserAccount(input: DeleteAccountInput!): MutationResponse!
}
