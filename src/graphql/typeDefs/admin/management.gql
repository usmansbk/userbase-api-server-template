type Query {
  user(id: ID!): User!
    @auth(
      rules: [
        { allow: roles, roles: ["Admin"] }
        { allow: permissions, permissions: ["ReadUser"] }
      ]
    )

  role(id: ID!): Role!
    @auth(
      rules: [
        { allow: roles, roles: ["Admin"] }
        { allow: permissions, permissions: ["ReadRole"] }
      ]
    )

  permission(id: ID!): Permission!
    @auth(
      rules: [
        { allow: roles, roles: ["Admin"] }
        { allow: permissions, permissions: ["ReadPermission"] }
      ]
    )

  session(id: ID!): UserSession!
    @auth(
      rules: [
        { allow: roles, roles: ["Admin"] }
        { allow: permissions, permissions: ["ReadSession"] }
      ]
    )

  userAvatar(id: ID!): UserAvatar!
    @auth(
      rules: [
        { allow: roles, roles: ["Admin"] }
        { allow: permissions, permissions: ["ReadUserAvatar"] }
      ]
    )

  userRole(id: ID!): UserRole!
    @auth(
      rules: [
        { allow: roles, roles: ["Admin"] }
        { allow: permissions, permissions: ["ReadRole"] }
      ]
    )

  userPermission(id: ID!): UserPermission!
    @auth(
      rules: [
        { allow: roles, roles: ["Admin"] }
        { allow: permissions, permissions: ["ReadPermission"] }
      ]
    )

  rolePermission(id: ID!): RolePermission!
    @auth(
      rules: [
        { allow: roles, roles: ["Admin"] }
        { allow: permissions, permissions: ["ReadPermission"] }
      ]
    )

  file(key: ID!, bucket: ID!): File!
    @auth(
      rules: [
        { allow: roles, roles: ["Admin"] }
        { allow: permissions, permissions: ["ReadFile"] }
      ]
    )

  users(limit: Int): UsersList!
    @auth(
      rules: [
        { allow: roles, roles: ["Admin"] }
        { allow: permissions, permissions: ["ReadUser"] }
      ]
    )

  roles(limit: Int): RolesList!
    @auth(
      rules: [
        { allow: roles, roles: ["Admin"] }
        { allow: permissions, permissions: ["ReadRole"] }
      ]
    )

  permissions(limit: Int): PermissionsList!
    @auth(
      rules: [
        { allow: roles, roles: ["Admin"] }
        { allow: permissions, permissions: ["ReadPermission"] }
      ]
    )

  sessions(limit: Int): SessionsList!
    @auth(
      rules: [
        { allow: roles, roles: ["Admin"] }
        { allow: permissions, permissions: ["ReadSession"] }
      ]
    )

  files(limit: Int): FilesList!
    @auth(
      rules: [
        { allow: roles, roles: ["Admin"] }
        { allow: permissions, permissions: ["ReadFile"] }
      ]
    )

  userAvatars(limit: Int): UserAvatarsList!
    @auth(
      rules: [
        { allow: roles, roles: ["Admin"] }
        { allow: permissions, permissions: ["ReadUserAvatar"] }
      ]
    )

  userRoles(limit: Int): UserRolesList!
    @auth(
      rules: [
        { allow: roles, roles: ["Admin"] }
        { allow: permissions, permissions: ["ReadRole"] }
      ]
    )

  userPermissions(limit: Int): UserPermissionsList!
    @auth(
      rules: [
        { allow: roles, roles: ["Admin"] }
        { allow: permissions, permissions: ["ReadPermission"] }
      ]
    )

  rolePermissions(limit: Int): RolePermissionsList!
    @auth(
      rules: [
        { allow: roles, roles: ["Admin"] }
        { allow: permissions, permissions: ["ReadPermission"] }
      ]
    )
}

type Mutation {
  createUsers(inputs: [CreateUserInput!]!): [User]!
    @auth(
      rules: [
        { allow: roles, roles: ["Admin"] }
        { allow: permissions, permissions: ["CreateUser"] }
      ]
    )

  updateUsers(inputs: [UpdateUserInput!]!): [User]!
    @auth(
      rules: [
        { allow: roles, roles: ["Admin"] }
        { allow: permissions, permissions: ["UpdateUser"] }
      ]
    )

  deleteUsers(inputs: [DeleteUserInput!]!): [User]!
    @auth(
      rules: [
        { allow: roles, roles: ["Admin"] }
        { allow: permissions, permissions: ["DeleteUser"] }
      ]
    )

  deleteUserPictures(inputs: [DeleteUserPictureInput!]!): [User]!
    @auth(
      rules: [
        { allow: roles, roles: ["Admin"] }
        { allow: permissions, permissions: ["DeleteUserAvatar"] }
      ]
    )

  sendVerificationEmailToUsers(
    inputs: [SendVerificationEmailInput!]!
  ): MutationResponse!
    @auth(
      rules: [
        { allow: roles, roles: ["Admin"] }
        { allow: permissions, permissions: ["SendVerificationEmail"] }
      ]
    )

  sendPhoneNumberVerificationSMSToUsers(
    inputs: [SendPhoneNumberVerificationSMSInput!]!
  ): MutationResponse!
    @auth(
      rules: [
        { allow: roles, roles: ["Admin"] }
        { allow: permissions, permissions: ["SendPhoneNumberVerificationSMS"] }
      ]
    )

  sendPasswordResetEmailToUsers(
    inputs: [SendPasswordResetEmailInput!]!
  ): MutationResponse!
    @auth(
      rules: [
        { allow: roles, roles: ["Admin"] }
        { allow: permissions, permissions: ["SendPasswordResetEmail"] }
      ]
    )

  sendEmailLoginOTPToUsers(
    inputs: [SendEmailLoginOTPInput!]!
  ): MutationResponse!
    @auth(
      rules: [
        { allow: roles, roles: ["Admin"] }
        { allow: permissions, permissions: ["SendEmailLoginOTP"] }
      ]
    )

  sendSMSLoginOTPToUsers(inputs: [SendSMSLoginOTPInput!]!): MutationResponse!
    @auth(
      rules: [
        { allow: roles, roles: ["Admin"] }
        { allow: permissions, permissions: ["SendSMSLoginOTP"] }
      ]
    )

  createRoles(inputs: [CreateRoleInput!]!): [Role]!
    @auth(
      rules: [
        { allow: roles, roles: ["Admin"] }
        { allow: permissions, permissions: ["CreateRole"] }
      ]
    )

  updateRoles(inputs: [UpdateRoleInput!]!): [Role]!
    @auth(
      rules: [
        { allow: roles, roles: ["Admin"] }
        { allow: permissions, permissions: ["UpdateRole"] }
      ]
    )

  deleteRoles(inputs: [DeleteRoleInput!]!): [Role]!
    @auth(
      rules: [
        { allow: roles, roles: ["Admin"] }
        { allow: permissions, permissions: ["DeleteRole"] }
      ]
    )

  createUserRoles(inputs: [CreateUserRoleInput!]!): [UserRole]!
    @auth(
      rules: [
        { allow: roles, roles: ["Admin"] }
        { allow: permissions, permissions: ["AssignRole"] }
      ]
    )

  deleteUserRoles(inputs: [DeleteUserRoleInput!]!): [UserRole]!
    @auth(
      rules: [
        { allow: roles, roles: ["Admin"] }
        { allow: permissions, permissions: ["AssignRole"] }
      ]
    )

  createPermissions(inputs: [CreatePermissionInput!]!): [Permission]!
    @auth(
      rules: [
        { allow: roles, roles: ["Admin"] }
        { allow: permissions, permissions: ["CreatePermission"] }
      ]
    )

  updatePermissions(inputs: [UpdatePermissionInput!]!): [Permission]!
    @auth(
      rules: [
        { allow: roles, roles: ["Admin"] }
        { allow: permissions, permissions: ["UpdatePermission"] }
      ]
    )

  deletePermissions(inputs: [DeletePermissionInput!]!): [Permission]!
    @auth(
      rules: [
        { allow: roles, roles: ["Admin"] }
        { allow: permissions, permissions: ["DeletePermission"] }
      ]
    )

  createRolePermissions(
    inputs: [CreateRolePermissionInput!]!
  ): [RolePermission]!
    @auth(
      rules: [
        { allow: roles, roles: ["Admin"] }
        { allow: permissions, permissions: ["GrantPermission"] }
      ]
    )

  deleteRolePermissions(
    inputs: [DeleteRolePermissionInput!]!
  ): [RolePermission]!
    @auth(
      rules: [
        { allow: roles, roles: ["Admin"] }
        { allow: permissions, permissions: ["GrantPermission"] }
      ]
    )

  createUserPermissions(
    inputs: [CreateUserPermissionInput!]!
  ): [UserPermission]!
    @auth(
      rules: [
        { allow: roles, roles: ["Admin"] }
        { allow: permissions, permissions: ["GrantPermission"] }
      ]
    )

  deleteUserPermissions(
    inputs: [DeleteUserPermissionInput!]!
  ): [UserPermission]!
    @auth(
      rules: [
        { allow: roles, roles: ["Admin"] }
        { allow: permissions, permissions: ["GrantPermission"] }
      ]
    )

  deleteUserSessions(inputs: [DeleteUserSessionInput!]!): [UserSession]!
    @auth(
      rules: [
        { allow: roles, roles: ["Admin"] }
        { allow: permissions, permissions: ["DeleteSession"] }
      ]
    )

  deleteFiles(inputs: [DeleteFileInput!]!): [File]!
    @auth(
      rules: [
        { allow: roles, roles: ["Admin"] }
        { allow: permissions, permissions: ["DeleteFile"] }
      ]
    )

  unblockUserIPs(input: UnblockUserIPsInput): User!
    @auth(
      rules: [
        { allow: roles, roles: ["Admin"] }
        { allow: permissions, permissions: ["UnblockUserIP"] }
      ]
    )
}

type UsersList {
  items: [User]!
}

type RolesList {
  items: [Role]!
}

type PermissionsList {
  items: [Permission]!
}

type SessionsList {
  items: [UserSession]!
}

type FilesList {
  items: [File]!
}

type UserAvatarsList {
  items: [UserAvatar]!
}

type UserRolesList {
  items: [UserRole]!
}

type UserPermissionsList {
  items: [UserPermission]!
}

type RolePermissionsList {
  items: [RolePermission]!
}

input CreateUserInput {
  firstName: NonEmptyString!
  lastName: NonEmptyString
  surname: NonEmptyString
  email: EmailAddress!
  password: NonEmptyString
  language: Locale
  phoneNumber: PhoneNumber
}

input UpdateUserInput {
  id: ID!
  firstName: NonEmptyString
  lastName: NonEmptyString
  surname: NonEmptyString
  email: EmailAddress
  password: NonEmptyString
  language: Locale
  phoneNumber: PhoneNumber
}

input DeleteUserInput {
  id: ID!
}

input DeleteUserPictureInput {
  id: ID!
}

input SendVerificationEmailInput {
  email: EmailAddress!
}

input SendPhoneNumberVerificationSMSInput {
  phoneNumber: PhoneNumber!
}

input SendPasswordResetEmailInput {
  email: EmailAddress!
}

input SendEmailLoginOTPInput {
  email: EmailAddress!
}

input SendSMSLoginOTPInput {
  phoneNumber: PhoneNumber!
}

input CreateRoleInput {
  name: NonEmptyString!
  description: NonEmptyString
}

input UpdateRoleInput {
  id: ID!
  name: NonEmptyString
  description: NonEmptyString
}

input DeleteRoleInput {
  id: ID!
}

input CreateUserRoleInput {
  userId: ID!
  roleId: ID!
}

input DeleteUserRoleInput {
  id: ID!
}

input CreatePermissionInput {
  name: NonEmptyString!
  description: NonEmptyString
}

input UpdatePermissionInput {
  id: ID!
  name: NonEmptyString
  description: NonEmptyString
}

input DeletePermissionInput {
  id: ID!
}

input CreateRolePermissionInput {
  roleId: ID!
  permissionId: ID!
}

input DeleteRolePermissionInput {
  id: ID!
}

input CreateUserPermissionInput {
  userId: ID!
  permissionId: ID!
}

input DeleteUserPermissionInput {
  id: ID!
}

input DeleteUserSessionInput {
  id: ID!
}

input DeleteFileInput {
  id: ID!
}

input UnblockUserIPsInput {
  id: ID!
  ip: [IP!]!
}
