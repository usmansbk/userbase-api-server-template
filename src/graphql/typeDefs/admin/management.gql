type Query {
  user(id: ID!): User!
    @auth(
      rules: [
        { allow: roles, roles: ["Admin"] }
        { allow: permissions, permissions: ["ReadUser"] }
      ]
    )

  role(id: ID!): Role!
    @auth(
      rules: [
        { allow: roles, roles: ["Admin"] }
        { allow: permissions, permissions: ["ReadRole"] }
      ]
    )

  permission(id: ID!): Permission!
    @auth(
      rules: [
        { allow: roles, roles: ["Admin"] }
        { allow: permissions, permissions: ["ReadPermission"] }
      ]
    )

  session(id: ID!): UserSession!
    @auth(
      rules: [
        { allow: roles, roles: ["Admin"] }
        { allow: permissions, permissions: ["ReadSession"] }
      ]
    )

  userAvatar(id: ID!): UserAvatar!
    @auth(
      rules: [
        { allow: roles, roles: ["Admin"] }
        { allow: permissions, permissions: ["ReadUserAvatar"] }
      ]
    )

  userRole(id: ID!): UserRole!
    @auth(
      rules: [
        { allow: roles, roles: ["Admin"] }
        { allow: permissions, permissions: ["ReadRole"] }
      ]
    )

  userPermission(id: ID!): UserPermission!
    @auth(
      rules: [
        { allow: roles, roles: ["Admin"] }
        { allow: permissions, permissions: ["ReadPermission"] }
      ]
    )

  rolePermission(id: ID!): RolePermission!
    @auth(
      rules: [
        { allow: roles, roles: ["Admin"] }
        { allow: permissions, permissions: ["ReadPermission"] }
      ]
    )

  file(key: ID!, bucket: ID!): File!
    @auth(
      rules: [
        { allow: roles, roles: ["Admin"] }
        { allow: permissions, permissions: ["ReadFile"] }
      ]
    )

  users(limit: Int): UsersList!
    @auth(
      rules: [
        { allow: roles, roles: ["Admin"] }
        { allow: permissions, permissions: ["ReadUser"] }
      ]
    )

  roles(limit: Int): RolesList!
    @auth(
      rules: [
        { allow: roles, roles: ["Admin"] }
        { allow: permissions, permissions: ["ReadRole"] }
      ]
    )

  permissions(limit: Int): PermissionsList!
    @auth(
      rules: [
        { allow: roles, roles: ["Admin"] }
        { allow: permissions, permissions: ["ReadPermission"] }
      ]
    )

  sessions(limit: Int): SessionsList!
    @auth(
      rules: [
        { allow: roles, roles: ["Admin"] }
        { allow: permissions, permissions: ["ReadSession"] }
      ]
    )

  files(limit: Int): FilesList!
    @auth(
      rules: [
        { allow: roles, roles: ["Admin"] }
        { allow: permissions, permissions: ["ReadFile"] }
      ]
    )
}

type Mutation {
  createManyUsers: [User]!
    @auth(
      rules: [
        { allow: roles, roles: ["Admin"] }
        { allow: permissions, permissions: ["CreateUser"] }
      ]
    )

  updateManyUsers: [User]!
    @auth(
      rules: [
        { allow: roles, roles: ["Admin"] }
        { allow: permissions, permissions: ["UpdateUser"] }
      ]
    )

  deleteManyUsers: [User]!
    @auth(
      rules: [
        { allow: roles, roles: ["Admin"] }
        { allow: permissions, permissions: ["DeleteUser"] }
      ]
    )

  deleteManyUserPictures: User!
    @auth(
      rules: [
        { allow: roles, roles: ["Admin"] }
        { allow: permissions, permissions: ["DeleteUserAvatar"] }
      ]
    )

  sendVerificationEmailToManyUsers: MutationResponse!
    @auth(
      rules: [
        { allow: roles, roles: ["Admin"] }
        { allow: permissions, permissions: ["SendVerificationEmail"] }
      ]
    )

  sendPhoneNumberVerificationSMSToManyUsers: MutationResponse!
    @auth(
      rules: [
        { allow: roles, roles: ["Admin"] }
        { allow: permissions, permissions: ["SendPhoneNumberVerificationSMS"] }
      ]
    )

  sendPasswordResetEmailToManyUsers: MutationResponse!
    @auth(
      rules: [
        { allow: roles, roles: ["Admin"] }
        { allow: permissions, permissions: ["SendPasswordResetEmail"] }
      ]
    )

  sendEmailLoginOTPToManyUsers: MutationResponse!
    @auth(
      rules: [
        { allow: roles, roles: ["Admin"] }
        { allow: permissions, permissions: ["SendEmailLoginOTP"] }
      ]
    )

  sendSMSLoginOTPToManyUsers: MutationResponse!
    @auth(
      rules: [
        { allow: roles, roles: ["Admin"] }
        { allow: permissions, permissions: ["SendSMSLoginOTP"] }
      ]
    )

  createManyRoles: [Role]!
    @auth(
      rules: [
        { allow: roles, roles: ["Admin"] }
        { allow: permissions, permissions: ["CreateRole"] }
      ]
    )

  updateManyRoles: [Role]!
    @auth(
      rules: [
        { allow: roles, roles: ["Admin"] }
        { allow: permissions, permissions: ["UpdateRole"] }
      ]
    )

  deleteManyRoles: [Role]!
    @auth(
      rules: [
        { allow: roles, roles: ["Admin"] }
        { allow: permissions, permissions: ["DeleteRole"] }
      ]
    )

  attachManyRolesToUser: [UserRole]!
    @auth(
      rules: [
        { allow: roles, roles: ["Admin"] }
        { allow: permissions, permissions: ["AssignRole"] }
      ]
    )

  attachRoleToManyUsers: [UserRole]!
    @auth(
      rules: [
        { allow: roles, roles: ["Admin"] }
        { allow: permissions, permissions: ["AssignRole"] }
      ]
    )

  detachManyRolesFromUser: [UserRole]!
    @auth(
      rules: [
        { allow: roles, roles: ["Admin"] }
        { allow: permissions, permissions: ["AssignRole"] }
      ]
    )

  detachRoleFromManyUsers: [UserRole]!
    @auth(
      rules: [
        { allow: roles, roles: ["Admin"] }
        { allow: permissions, permissions: ["AssignRole"] }
      ]
    )

  createManyPermissions: [Permission]!
    @auth(
      rules: [
        { allow: roles, roles: ["Admin"] }
        { allow: permissions, permissions: ["CreatePermission"] }
      ]
    )

  updateManyPermissions: [Permission]!
    @auth(
      rules: [
        { allow: roles, roles: ["Admin"] }
        { allow: permissions, permissions: ["UpdatePermission"] }
      ]
    )

  deleteManyPermissions: [Permission]!
    @auth(
      rules: [
        { allow: roles, roles: ["Admin"] }
        { allow: permissions, permissions: ["DeletePermission"] }
      ]
    )

  attachManyPermissionsToRole: [RolePermission]!
    @auth(
      rules: [
        { allow: roles, roles: ["Admin"] }
        { allow: permissions, permissions: ["GrantPermission"] }
      ]
    )

  attachPermissionToManyRoles: [RolePermission]!
    @auth(
      rules: [
        { allow: roles, roles: ["Admin"] }
        { allow: permissions, permissions: ["GrantPermission"] }
      ]
    )

  detachManyPermissionsFromRole: [RolePermission]!
    @auth(
      rules: [
        { allow: roles, roles: ["Admin"] }
        { allow: permissions, permissions: ["GrantPermission"] }
      ]
    )

  detachPermissionFromManyRoles: [RolePermission]!
    @auth(
      rules: [
        { allow: roles, roles: ["Admin"] }
        { allow: permissions, permissions: ["GrantPermission"] }
      ]
    )

  attachManyPermissionsToUser: [UserPermission]!
    @auth(
      rules: [
        { allow: roles, roles: ["Admin"] }
        { allow: permissions, permissions: ["GrantPermission"] }
      ]
    )

  attachPermissionToManyUsers: [UserPermission]!
    @auth(
      rules: [
        { allow: roles, roles: ["Admin"] }
        { allow: permissions, permissions: ["GrantPermission"] }
      ]
    )

  detachManyPermissionsFromUser: [UserPermission]!
    @auth(
      rules: [
        { allow: roles, roles: ["Admin"] }
        { allow: permissions, permissions: ["GrantPermission"] }
      ]
    )

  detachPermissionFromManyUsers: [UserPermission]!
    @auth(
      rules: [
        { allow: roles, roles: ["Admin"] }
        { allow: permissions, permissions: ["GrantPermission"] }
      ]
    )

  deleteManySessions: [UserSession]!
    @auth(
      rules: [
        { allow: roles, roles: ["Admin"] }
        { allow: permissions, permissions: ["DeleteSession"] }
      ]
    )

  deleteUserSessions: User!
    @auth(
      rules: [
        { allow: roles, roles: ["Admin"] }
        { allow: permissions, permissions: ["DeleteSession"] }
      ]
    )

  deleteManyFiles: [File]!
    @auth(
      rules: [
        { allow: roles, roles: ["Admin"] }
        { allow: permissions, permissions: ["DeleteFile"] }
      ]
    )

  unblockUserIP: [File]!
    @auth(
      rules: [
        { allow: roles, roles: ["Admin"] }
        { allow: permissions, permissions: ["UnblockUserIP"] }
      ]
    )
}

type UsersList {
  cursor: ID
  items: [User]!
}

type RolesList {
  cursor: ID
  items: [Role]!
}

type PermissionsList {
  cursor: ID
  items: [Permission]!
}

type SessionsList {
  cursor: ID
  items: [UserSession]!
}

type FilesList {
  cursor: ID
  items: [File]!
}
